<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding Life</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="codinglife.tech/"/>
  <updated>2019-07-15T15:44:59.356Z</updated>
  <id>codinglife.tech/</id>
  
  <author>
    <name>Max Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在MySQL中使用LAST_INSERT_ID获取唯一自增序列</title>
    <link href="codinglife.tech/2019/07/implement-sequence-with-mysql-last-insert-id/"/>
    <id>codinglife.tech/2019/07/implement-sequence-with-mysql-last-insert-id/</id>
    <published>2019-07-15T12:03:02.000Z</published>
    <updated>2019-07-15T15:44:59.356Z</updated>
    
    <content type="html"><![CDATA[<p>一般如果遇到生成全局唯一的自增ID的需求时，往往第一反应都是直接利用数据的Sequence对象，简单，直接了当。但是MySQL偏偏不支持Sequence对象，那我们该如何是好呢？</p><h2 id="什么是Sequence"><a href="#什么是Sequence" class="headerlink" title="什么是Sequence"></a>什么是Sequence</h2><p>Sequence也叫做序列，一般用做表的主键，或者一些项目的编号等。一般具有以下几个特点：</p><ul><li>全表唯一</li><li>自增</li><li>不一定严格连续（中间由于事务的回滚可能会出现<code>洞</code>，比如1，2，3，5，6）</li></ul><a id="more"></a><p>在常见的几种数据库中，Oracle、SQL Server都内置有Sequence对象，具体用法就不在此赘述了。在本文中我们来讨论一下如何在原生不支持Sequence的MySQL（目前最新的大版本为8.0）中模拟出Sequence的效果。</p><h2 id="如何在MySQL中模拟Sequence"><a href="#如何在MySQL中模拟Sequence" class="headerlink" title="如何在MySQL中模拟Sequence"></a>如何在MySQL中模拟Sequence</h2><p>MySQL中的<code>auto_increment</code>一般是用来生成表的主键，本身能够生成自增的唯一ID，但是一张表只能有一个列带有<code>auto_increment</code>属性。在实际项目中，我们可能需要不止一种序列号，比如项目编号（PROJ-001，PROJ-002…）、发票编号（INV-0001，INV-0002…），订单编号（ORD-0001，ORD-0002…）等等，下面将通过<code>auto_increment</code>和<code>LAST_INSERT_ID</code>相结合实现该功能。</p><h3 id="LAST-INSERT-ID函数"><a href="#LAST-INSERT-ID函数" class="headerlink" title="LAST_INSERT_ID函数"></a>LAST_INSERT_ID函数</h3><p>该函数有两种形式：<a href="https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id" target="_blank" rel="noopener"><code>LAST_INSERT_ID()</code></a>, <a href="https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id" target="_blank" rel="noopener"><code>LAST_INSERT_ID(expr)</code></a>。无参的形式会返回最近一次执行<code>INSERT</code>语句时<code>auto_increment</code>的值；带<code>expr</code>的形式会返回表达式的值，并且该值会被记住，在下一次调用<code>LAST_INSERT_ID()</code>时也返回该值。下面我们来看一个例子。</p><p>首先创建一张表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE user (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(50) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后插入两条数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user(name) VALUES(&apos;张三&apos;);</span><br><span class="line">INSERT INTO user(name) VALUES(&apos;李四&apos;);</span><br><span class="line"></span><br><span class="line">SELECT LAST_INSERT_ID();</span><br></pre></td></tr></table></figure><p>此时得到的结果是2。</p><p><strong>注意：</strong>如果是一条语句插入多条值，则返回的是插入第一条时自动生成的ID，而不是最后一条的。</p><p>比如我们再插入三条数据，不过换个写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO user(name) </span><br><span class="line">VALUES(&apos;王五&apos;),</span><br><span class="line">      (&apos;赵六&apos;),</span><br><span class="line">      (&apos;郑七&apos;);</span><br><span class="line"></span><br><span class="line">SELECT LAST_INSERT_ID();</span><br></pre></td></tr></table></figure><p>此时得到的结果是3，而<strong>不是</strong>5。</p><h3 id="获取自增序列"><a href="#获取自增序列" class="headerlink" title="获取自增序列"></a>获取自增序列</h3><p>在实际的项目中我们完全可以换个方式，避免上面👆的情况，作为一个程序员，何必没有困难，制造困难为难自己呢？接着看下一个更加通用的例子。</p><p>创建另一张表并初始化数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE sequence (</span><br><span class="line">    id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    seq_type VARCHAR(50) NOT NULL,</span><br><span class="line">    year INT NOT NULL,</span><br><span class="line">    current_val BIGINT NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO sequence(seq_type, year, current_val) VALUES(&apos;INVOICE&apos;, 2019, 0);</span><br></pre></td></tr></table></figure><p>每次在获取<code>current_val</code>之前，先通过<code>LAST_INSERT_ID(current_val + 1)</code>更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UPDATE sequence </span><br><span class="line">SET current_val = LAST_INSERT_ID(current_val + 1)</span><br><span class="line">WHERE seq_type = &apos;INVOICE&apos; AND year = 2019;</span><br><span class="line"></span><br><span class="line">SELECT LAST_INSERT_ID();</span><br></pre></td></tr></table></figure><p>这样每次都能获取自增之后的值了，但是也有例外的情况。比如两个人同时在获取新的值，A先做了update操作，然后B也做了update操作，然后A的操作由于某种原因回滚了，B的操作成功了，此时序列中间就会出现一个<code>洞</code>。虽然不是严格连续的，但是在大多数业务场景中，已经满足要求了。</p><p><strong>还需要注意的是</strong>，如果<code>seq_type</code>或者<code>year</code>条件不满足，那么这里的<code>SELECT LAST_INSERT_ID();</code>就会始终返回上一次的值，可能会导致意想不到的的错误。</p><h2 id="LAST-INSERT-ID-vs-MAX"><a href="#LAST-INSERT-ID-vs-MAX" class="headerlink" title="LAST_INSERT_ID() vs. MAX()"></a>LAST_INSERT_ID() vs. MAX()</h2><p><code>LAST_INSERT_ID()</code>是以数据库连接为基础的，即使有多个人同时通过多个连接获取Sequence也不会有问题，每个客户端会获取到属于他自己的序列号，不用担心会受到其他客户端的影响，或者影响其他客户端。在这种情况下，<code>MAX()</code>恐怕就不工作了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote><ul><li><a href="https://www.percona.com/community-blog/2018/10/12/generating-identifiers-auto_increment-sequence/" target="_blank" rel="noopener">https://www.percona.com/community-blog/2018/10/12/generating-identifiers-auto_increment-sequence/</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/information-functions.html#function_last-insert-id</a></li><li><a href="http://www.mysqltutorial.org/mysql-last_insert_id.aspx" target="_blank" rel="noopener">http://www.mysqltutorial.org/mysql-last_insert_id.aspx</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般如果遇到生成全局唯一的自增ID的需求时，往往第一反应都是直接利用数据的Sequence对象，简单，直接了当。但是MySQL偏偏不支持Sequence对象，那我们该如何是好呢？&lt;/p&gt;
&lt;h2 id=&quot;什么是Sequence&quot;&gt;&lt;a href=&quot;#什么是Sequence&quot; class=&quot;headerlink&quot; title=&quot;什么是Sequence&quot;&gt;&lt;/a&gt;什么是Sequence&lt;/h2&gt;&lt;p&gt;Sequence也叫做序列，一般用做表的主键，或者一些项目的编号等。一般具有以下几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全表唯一&lt;/li&gt;
&lt;li&gt;自增&lt;/li&gt;
&lt;li&gt;不一定严格连续（中间由于事务的回滚可能会出现&lt;code&gt;洞&lt;/code&gt;，比如1，2，3，5，6）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="database" scheme="codinglife.tech/categories/database/"/>
    
    
      <category term="mysql" scheme="codinglife.tech/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="codinglife.tech/2019/07/hello-world/"/>
    <id>codinglife.tech/2019/07/hello-world/</id>
    <published>2019-07-11T03:18:39.829Z</published>
    <updated>2019-07-15T15:06:17.694Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
